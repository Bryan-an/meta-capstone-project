import { type NextRequest, type NextResponse } from 'next/server';
import { updateSession } from '@/lib/supabase/middleware';
import createIntlMiddleware from 'next-intl/middleware';
import {
  locales,
  localePrefix,
  pathnames,
  defaultLocale,
} from './i18n/routing';

/**
 * The primary list of supported locales in the application.
 * @see {@link locales} from './i18n/routing'
 */
type Locale = (typeof locales)[number];

// Initialize next-intl middleware with configuration from routing setup
const intlMiddleware = createIntlMiddleware({
  locales,
  defaultLocale: defaultLocale as Locale, // Type assertion needed here
  localePrefix,
  pathnames,
});

/**
 * Root middleware function for the Next.js application.
 *
 * @remarks
 * This middleware chain handles internationalization (i18n) routing
 * first, followed by Supabase session management.
 * It uses a workaround for `updateSession` due to a potential signature issue,
 * currently passing only the request.
 * The response returned is the one generated by the `intlMiddleware`.
 *
 * @param request - The incoming Next.js request object.
 * @returns The response processed by the middleware chain.
 */
export async function middleware(request: NextRequest): Promise<NextResponse> {
  // 1. Handle i18n routing
  const i18nResponse = intlMiddleware(request);

  // 2. Update Supabase session
  // WORKAROUND: Currently passing only `request` due to potential type signature
  // mismatch in `updateSession`. This may affect session handling.
  await updateSession(request /*, i18nResponse */);

  // Return the response from the i18n middleware
  return i18nResponse;
}

/**
 * Middleware configuration.
 *
 * @remarks
 * The `matcher` is configured to run the middleware on all paths except for:
 * - API routes (`/api/...`)
 * - Next.js internal static files (`/_next/static/...`)
 * - Next.js image optimization files (`/_next/image/...`)
 * - The favicon file (`/favicon.ico`)
 * - Any path containing a file extension (e.g., `.png`, `.css`)
 */
export const config = {
  matcher: ['/((?!api|_next/static|_next/image|favicon.ico|.*\\.).*)'],
};
